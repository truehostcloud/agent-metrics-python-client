# coding: utf-8

"""
    Agent Metrics API

    API for online agents

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ShiftAgent(BaseModel):
    """
    ShiftAgent
    """ # noqa: E501
    id: Optional[StrictInt] = None
    agent_name: Optional[Annotated[str, Field(strict=True, max_length=155)]] = None
    agent_id: Optional[Annotated[str, Field(strict=True, max_length=25)]] = None
    shift_status: Optional[StrictStr] = None
    shift_start_time: Optional[StrictStr] = None
    shift_end_time: Optional[StrictStr] = None
    communication_channels: Optional[StrictStr] = Field(default=None, description="Communication channels this agent handles")
    email: Optional[Annotated[str, Field(strict=True, max_length=254)]] = Field(default=None, description="Agent email address")
    operator_id: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Supportpal Operator ID")
    department_ids: Optional[List[StrictInt]] = Field(default=None, description="Departments this operator belongs to")
    __properties: ClassVar[List[str]] = ["id", "agent_name", "agent_id", "shift_status", "shift_start_time", "shift_end_time", "communication_channels", "email", "operator_id", "department_ids"]

    @field_validator('shift_status')
    def shift_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['online', 'offline', 'busy', 'outofoffice']):
            raise ValueError("must be one of enum values ('online', 'offline', 'busy', 'outofoffice')")
        return value

    @field_validator('communication_channels')
    def communication_channels_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unknown', 'chat', 'calls', 'tickets', 'chat_call', 'chat_tickets', 'call_tickets']):
            raise ValueError("must be one of enum values ('unknown', 'chat', 'calls', 'tickets', 'chat_call', 'chat_tickets', 'call_tickets')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShiftAgent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if agent_name (nullable) is None
        # and model_fields_set contains the field
        if self.agent_name is None and "agent_name" in self.model_fields_set:
            _dict['agent_name'] = None

        # set to None if agent_id (nullable) is None
        # and model_fields_set contains the field
        if self.agent_id is None and "agent_id" in self.model_fields_set:
            _dict['agent_id'] = None

        # set to None if shift_start_time (nullable) is None
        # and model_fields_set contains the field
        if self.shift_start_time is None and "shift_start_time" in self.model_fields_set:
            _dict['shift_start_time'] = None

        # set to None if shift_end_time (nullable) is None
        # and model_fields_set contains the field
        if self.shift_end_time is None and "shift_end_time" in self.model_fields_set:
            _dict['shift_end_time'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if operator_id (nullable) is None
        # and model_fields_set contains the field
        if self.operator_id is None and "operator_id" in self.model_fields_set:
            _dict['operator_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShiftAgent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "agent_name": obj.get("agent_name"),
            "agent_id": obj.get("agent_id"),
            "shift_status": obj.get("shift_status"),
            "shift_start_time": obj.get("shift_start_time"),
            "shift_end_time": obj.get("shift_end_time"),
            "communication_channels": obj.get("communication_channels"),
            "email": obj.get("email"),
            "operator_id": obj.get("operator_id"),
            "department_ids": obj.get("department_ids")
        })
        return _obj


